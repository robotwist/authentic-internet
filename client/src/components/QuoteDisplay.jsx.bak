import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { 
  getRandomQuote, 
  getRandomShakespeareQuote, 
  getZenQuote,
  getTodayQuote
} from '../api/externalApis';
import './QuoteDisplay.css';

const QuoteDisplay = ({ 
  sourceType = 'general', 
  refreshInterval = 0, 
  tags = '', 
  author = '',
  theme = '',
  className = '',
  showSource = true
}) => {
  const [quote, setQuote] = useState({ text: '', source: '' });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  const fetchQuote = async () => {
    setLoading(true);
    setError('');
    try {
      let quoteData;
      
      switch (sourceType) {
        case 'shakespeare':
          quoteData = await getRandomShakespeareQuote();
          break;
        case 'zen':
          quoteData = await getZenQuote();
          break;
        case 'today':
          quoteData = await getTodayQuote();
          break;
        default:
          // For general quotes, we can pass tags and author
          const options = {};
          if (tags) options.tags = tags;
          if (author) options.author = author;
          
          quoteData = await getRandomQuote(options);
          break;
      }
      
      setQuote(quoteData);
    } catch (err) {
      console.error('Error fetching quote:', err);
      setError('Failed to load quote');
      setQuote({ 
        text: 'The journey of a thousand miles begins with a single step.', 
        source: 'Lao Tzu' 
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchQuote();
    
    // Set up a refresh interval if specified
    if (refreshInterval > 0) {
      const intervalId = setInterval(fetchQuote, refreshInterval * 1000);
      
      // Clean up interval on component unmount
      return () => clearInterval(intervalId);
    }
  }, [sourceType, tags, author, refreshInterval]);

  // Apply different class based on source type
  const getSourceClass = () => {
    switch (sourceType) {
      case 'shakespeare': return 'shakespeare';
      case 'zen': return 'zen';
      case 'today': return 'today';
      default: return '';
    }
  };

  return (
    <div className={`quote-display ${className} ${getSourceClass()} ${loading ? 'loading' : ''}`}>
      {loading ? (
        <div className="quote-loading">
          <div className="quote-loading-spinner"></div>
          <p>Loading wisdom...</p>
        </div>
      ) : error ? (
        <div className="quote-error">
          <p>{error}</p>
          <button onClick={fetchQuote} className="quote-retry-btn">
            Try Again
          </button>
        </div>
      ) : (
        <>
          <div className="quote-text">"{quote.text}"</div>
          {showSource && <div className="quote-source">— {quote.source}</div>}
          {refreshInterval > 0 && (
            <button onClick={fetchQuote} className="quote-refresh-btn">
              ↻ New Quote
            </button>
          )}
        </>
      )}
    </div>
  );
};

QuoteDisplay.propTypes = {
  sourceType: PropTypes.oneOf(['general', 'shakespeare', 'zen', 'today']),
  refreshInterval: PropTypes.number,
  tags: PropTypes.string,
  author: PropTypes.string,
  theme: PropTypes.string,
  className: PropTypes.string,
  showSource: PropTypes.bool
};

export default QuoteDisplay; 